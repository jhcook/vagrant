# -*- mode: ruby -*-
# vi: set ft=ruby :

# Author: Justin Cook <jhcook@gmail.com>

require './vagrant-provision-reboot-plugin'

$VB_NAME = "centos7-devstack-bootstrap"

Vagrant.configure(2) do |config|

  config.vm.box = "jhcook/centos7"
  config.ssh.insert_key = false

  opt_file = "#{Dir.home}/VirtualBox VMs/#{$VB_NAME}/optStackDisk.vdi"

  config.vm.provider "virtualbox" do |vbvm|
    vbvm.name = $VB_NAME
    vbvm.customize ['modifyvm', :id, '--name', vbvm.name]
    vbvm.memory = 4096
    vbvm.cpus = 2
    vbvm.customize ['createhd', '--filename', opt_file, '--variant', 'Fixed', '--size', 20 * 1024]   unless File.file?(opt_file)
    vbvm.customize ['storagectl', :id, '--name', 'SATA', '--add', 'sata',
                    '--controller', 'IntelAHCI', '--portcount', 2,
                    '--hostiocache', 'on']
    vbvm.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port',
                    1, '--device', 0, '--type', 'hdd', '--medium', opt_file]
  end

  # The guest should have an identifiable hostname
  config.vm.hostname = "centos7-devstack.secnix.com"

  # Create a forwarded port mapping which allows access to a specific port
  config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "10.2.3.4", nictype: 'virtio', 
                    adapter: 2, virtualbox__intnet: "devstack"

  # Use tabs!!! There are embedded here docs.

  config.vm.provision "shell", inline: <<-SHELL
	set -x
	set -o errexit
	
	# Install tools needed for devstack
	yum -y install yum-utils
	yum -y install bridge-utils net-tools
	yum -y install iptables-services
	yum -y install git
	yum -y install redhat-lsb-core
	yum -y install lvm2
	yum -y install epel-release
	yum -y install python-pip
	pip install --upgrade pip
	
	# Create a partition for /opt/stack, default vgroup and the rest for a specific vgroup.
	fdisk /dev/sdb <<-__FDISK__ || /bin/true
	n
	p
	1
    
	+5G
	n
	p
	2
	
	+5G
	n
	p
	3
	
	
	w
	__FDISK__
  SHELL

  config.vm.provision :unix_reboot

  config.vm.provision "shell", inline: <<-SHELL
	set -x
	set -o errexit

	# Create an xfs filesystem on the partition just created.
	mkfs.xfs /dev/sdb1 || /bin/true
	mkdir -p /opt/stack || /bin/true

	# Add this to /etc/fstab if there is no other entry for /opt/stack
	grep -q '/opt/stack' /etc/fstab || ( echo `blkid /dev/sdb1 | awk '{print$2}' | \
	sed -e 's/"//g'` /opt/stack   xfs   noatime,nobarrier   0   0 >> /etc/fstab ; \
	mount /opt/stack )

	# Create vgroup stack-volumes-default
	vgcreate stack-volumes-default /dev/sdb2 || /bin/true

	# Create vgroup stack-volumes-lvmdriver-1
	vgcreate stack-volumes-lvmdriver-1 /dev/sdb3 || /bin/true

	# Restart networking so changes take effect (Vagrant/RHEL workaround)
	systemctl restart NetworkManager.service &&  systemctl restart network.service || /bin/true

	# Create the user 'stack', clone devstack from git and run the stack.
	sed -ie 's|Defaults\s\+requiretty|#Defaults\trequiretty|' /etc/sudoers
	adduser -g wheel stack || /bin/true
	echo "stack ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
	chown stack:wheel /opt/stack
  SHELL

  config.vm.provision "shell", inline: <<-SHELL
	set -x
	set -o errexit

    su - stack <<-__HACK__
		cd
		declare ADMIN_PASSWORD='admin'

		if [ -d 'devstack' ]
		then
			rm -fr devstack
		fi

		git clone https://git.openstack.org/openstack-dev/devstack -b stable/mitaka
		cd devstack

		cat <<-__EOF__ > local.conf
		[[local|localrc]]
		FLAT_INTERFACE=eth0
		HOST_IP=10.0.2.15
		NETWORK_GATEWAY=10.2.3.2
		FLOATING_RANGE=10.0.2.0/24
		FIXED_RANGE=10.2.3.128/25
		FIXED_NETWORK_SIZE=128
		LOGDAYS=1
		LOGDIR=/home/stack/devstack/log
		LOGFILE=/home/stack/devstack/log/stack.sh.log
		ADMIN_PASSWORD=admin
		DATABASE_PASSWORD=admin
		RABBIT_PASSWORD=admin
		SERVICE_PASSWORD=admin
		SERVICE_TOKEN=a682f596-76f3-11e3-b3b2-e716f9080d50
		__EOF__
		
		./stack.sh
	__HACK__

    # Start and stop critical services either needed or that get in the way.
    systemctl stop iptables.service
    systemctl disable iptables.service
    systemctl enable mariadb
    systemctl enable httpd
    systemctl enable rabbitmq-server
    systemctl enable tgtd

    # Disable SELinux because it interferes when rebooted
    grep -q SELINUX=enforcing /etc/selinux/config && sed -i \
    's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config
	SHELL
end
